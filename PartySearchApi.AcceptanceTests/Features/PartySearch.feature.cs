// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PartySearchApi.AcceptanceTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Search for a sanctioned party by name or ID")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [NUnit.Framework.CategoryAttribute("allure.label.epic:Sanctions")]
    [NUnit.Framework.CategoryAttribute("allure.label.feature:PartySearch")]
    public partial class SearchForASanctionedPartyByNameOrIDFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "allure.label.epic:Sanctions",
                "allure.label.feature:PartySearch"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Search for a sanctioned party by name or ID", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "PartySearch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search by full name returns an exact match")]
        public async System.Threading.Tasks.Task SearchByFullNameReturnsAnExactMatch()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Search by full name returns an exact match", null, tagsOfScenario, argumentsOfScenario, TagHelper.CombineTags(featureTags, new string[] {
                            "allure.label.story:SearchByPartyName"}));
#line 8
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table1.AddRow(new string[] {
                            "P12345678",
                            "Acme Corporation",
                            "Organization",
                            "Approved",
                            "95%"});
                table1.AddRow(new string[] {
                            "P87654321",
                            "Axel Accounting",
                            "Organization",
                            "Pending Review",
                            "70%"});
                table1.AddRow(new string[] {
                            "P87654329",
                            "Axe Capital",
                            "Organization",
                            "Escalated",
                            "85%"});
#line 10
      await testRunner.GivenAsync("the following parties exist:", ((string)(null)), table1, "Given ");
#line hidden
#line 15
      await testRunner.WhenAsync("Connie searches for \"Acme Corporation\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table2.AddRow(new string[] {
                            "P12345678",
                            "Acme Corporation",
                            "Organization",
                            "Approved",
                            "95%"});
#line 16
      await testRunner.ThenAsync("the search results should contain exactly:", ((string)(null)), table2, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search by partial name returns all matching parties")]
        public async System.Threading.Tasks.Task SearchByPartialNameReturnsAllMatchingParties()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Search by partial name returns all matching parties", null, tagsOfScenario, argumentsOfScenario, TagHelper.CombineTags(featureTags, new string[] {
                            "allure.label.story:SearchByPartyName"}));
#line 20
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table3.AddRow(new string[] {
                            "P12345678",
                            "Acme Corporation",
                            "Organization",
                            "Approved",
                            "95%"});
                table3.AddRow(new string[] {
                            "P87654321",
                            "Acme Inc.",
                            "Organization",
                            "Pending Review",
                            "65%"});
                table3.AddRow(new string[] {
                            "P87654329",
                            "Axe Capital",
                            "Organization",
                            "Escalated",
                            "85%"});
#line 21
      await testRunner.GivenAsync("the following parties exist:", ((string)(null)), table3, "Given ");
#line hidden
#line 26
      await testRunner.WhenAsync("Connie searches for \"Acme\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table4.AddRow(new string[] {
                            "P12345678",
                            "Acme Corporation",
                            "Organization",
                            "Approved",
                            "95%"});
                table4.AddRow(new string[] {
                            "P87654321",
                            "Acme Inc.",
                            "Organization",
                            "Pending Review",
                            "65%"});
#line 27
      await testRunner.ThenAsync("the search results should contain exactly:", ((string)(null)), table4, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search by ID returns the correct party")]
        public async System.Threading.Tasks.Task SearchByIDReturnsTheCorrectParty()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Search by ID returns the correct party", null, tagsOfScenario, argumentsOfScenario, TagHelper.CombineTags(featureTags, new string[] {
                            "allure.label.story:SearchByPartyId"}));
#line 35
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table5.AddRow(new string[] {
                            "P12345678",
                            "Acme Corporation",
                            "Organization",
                            "Approved",
                            "95%"});
                table5.AddRow(new string[] {
                            "P87654329",
                            "Axe Capital",
                            "Organization",
                            "Escalated",
                            "85%"});
#line 36
      await testRunner.GivenAsync("the following parties exist:", ((string)(null)), table5, "Given ");
#line hidden
#line 40
      await testRunner.WhenAsync("Connie searches for \"P12345678\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table6.AddRow(new string[] {
                            "P12345678",
                            "Acme Corporation",
                            "Organization",
                            "Approved",
                            "95%"});
#line 41
      await testRunner.ThenAsync("the search results should contain exactly:", ((string)(null)), table6, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search by partial ID returns the matching party")]
        public async System.Threading.Tasks.Task SearchByPartialIDReturnsTheMatchingParty()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Search by partial ID returns the matching party", null, tagsOfScenario, argumentsOfScenario, TagHelper.CombineTags(featureTags, new string[] {
                            "allure.label.story:SearchByPartyId"}));
#line 45
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table7.AddRow(new string[] {
                            "P12345678",
                            "Acme Corporation",
                            "Organization",
                            "Approved",
                            "95%"});
                table7.AddRow(new string[] {
                            "P12345329",
                            "Axe Capital",
                            "Organization",
                            "Escalated",
                            "85%"});
                table7.AddRow(new string[] {
                            "P87654321",
                            "Axel Accounting",
                            "Organization",
                            "Pending Review",
                            "70%"});
#line 46
      await testRunner.GivenAsync("the following parties exist:", ((string)(null)), table7, "Given ");
#line hidden
#line 51
      await testRunner.WhenAsync("Connie searches for \"P12345\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table8.AddRow(new string[] {
                            "P12345678",
                            "Acme Corporation",
                            "Organization",
                            "Approved",
                            "95%"});
                table8.AddRow(new string[] {
                            "P12345329",
                            "Axe Capital",
                            "Organization",
                            "Escalated",
                            "85%"});
#line 52
      await testRunner.ThenAsync("the search results should contain exactly:", ((string)(null)), table8, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for an unknown ID returns no results")]
        public async System.Threading.Tasks.Task SearchForAnUnknownIDReturnsNoResults()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Search for an unknown ID returns no results", null, tagsOfScenario, argumentsOfScenario, TagHelper.CombineTags(featureTags, new string[] {
                            "allure.label.story:SearchByPartyId"}));
#line 57
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table9.AddRow(new string[] {
                            "P12345678",
                            "Acme Corporation",
                            "Organization",
                            "Approved",
                            "95%"});
#line 58
      await testRunner.GivenAsync("the following parties exist:", ((string)(null)), table9, "Given ");
#line hidden
#line 61
      await testRunner.WhenAsync("Connie searches for \"XYZ\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 62
      await testRunner.ThenAsync("the search results should be empty", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The one where Connie searches for \"acme corporation\"")]
        public async System.Threading.Tasks.Task TheOneWhereConnieSearchesForAcmeCorporation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("The one where Connie searches for \"acme corporation\"", null, tagsOfScenario, argumentsOfScenario, TagHelper.CombineTags(featureTags, new string[] {
                            "allure.label.story:SearchByPartyName"}));
#line 67
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table10.AddRow(new string[] {
                            "P12345678",
                            "Acme Corporation",
                            "Organization",
                            "Approved",
                            "95%"});
#line 68
      await testRunner.GivenAsync("the following parties exist:", ((string)(null)), table10, "Given ");
#line hidden
#line 71
      await testRunner.WhenAsync("Connie searches for \"acme corporation\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table11.AddRow(new string[] {
                            "P12345678",
                            "Acme Corporation",
                            "Organization",
                            "Approved",
                            "95%"});
#line 72
      await testRunner.ThenAsync("the search results should contain exactly:", ((string)(null)), table11, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search results are ordered by name")]
        public async System.Threading.Tasks.Task SearchResultsAreOrderedByName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Search results are ordered by name", null, tagsOfScenario, argumentsOfScenario, TagHelper.CombineTags(featureTags, new string[] {
                            "allure.label.story:SortingSearchResults"}));
#line 79
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table12.AddRow(new string[] {
                            "P12345678",
                            "Acme Corporation",
                            "Organization",
                            "Approved",
                            "95%"});
                table12.AddRow(new string[] {
                            "P87654321",
                            "Axel Accounting",
                            "Organization",
                            "Pending Review",
                            "70%"});
                table12.AddRow(new string[] {
                            "P87654329",
                            "Axe Capital",
                            "Organization",
                            "Escalated",
                            "85%"});
#line 80
      await testRunner.GivenAsync("the following parties exist:", ((string)(null)), table12, "Given ");
#line hidden
#line 85
      await testRunner.WhenAsync("Connie searches for \"Axe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table13.AddRow(new string[] {
                            "P87654329",
                            "Axe Capital",
                            "Organization",
                            "Escalated",
                            "85%"});
                table13.AddRow(new string[] {
                            "P87654321",
                            "Axel Accounting",
                            "Organization",
                            "Pending Review",
                            "70%"});
#line 86
      await testRunner.ThenAsync("the search results should contain exactly:", ((string)(null)), table13, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Connie searches for organisations named Smith")]
        public async System.Threading.Tasks.Task ConnieSearchesForOrganisationsNamedSmith()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Connie searches for organisations named Smith", null, tagsOfScenario, argumentsOfScenario, TagHelper.CombineTags(featureTags, new string[] {
                            "allure.label.story:FilterSearchResults"}));
#line 94
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table14.AddRow(new string[] {
                            "P12345678",
                            "John Smith",
                            "Individual",
                            "Approved",
                            "90%"});
                table14.AddRow(new string[] {
                            "P87654321",
                            "Jane Smith",
                            "Individual",
                            "Pending Review",
                            "85%"});
                table14.AddRow(new string[] {
                            "P87654329",
                            "Smith Johnson",
                            "Organization",
                            "Escalated",
                            "80%"});
                table14.AddRow(new string[] {
                            "P87654339",
                            "Sarah-Jane Smith",
                            "Individual",
                            "False Positive",
                            "80%"});
#line 95
      await testRunner.GivenAsync("the following parties exist:", ((string)(null)), table14, "Given ");
#line hidden
                global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                            "Filter",
                            "Value"});
                table15.AddRow(new string[] {
                            "Type",
                            "Organization"});
#line 101
      await testRunner.WhenAsync("Connie searches for \"Smith\" with the following filters:", ((string)(null)), table15, "When ");
#line hidden
                global::Reqnroll.Table table16 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table16.AddRow(new string[] {
                            "P87654329",
                            "Smith Johnson",
                            "Organization",
                            "Escalated",
                            "80%"});
#line 104
      await testRunner.ThenAsync("the search results should contain exactly:", ((string)(null)), table16, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Connie searches for individuals named Smith")]
        public async System.Threading.Tasks.Task ConnieSearchesForIndividualsNamedSmith()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Connie searches for individuals named Smith", null, tagsOfScenario, argumentsOfScenario, TagHelper.CombineTags(featureTags, new string[] {
                            "allure.label.story:FilterSearchResults"}));
#line 108
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table17 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table17.AddRow(new string[] {
                            "P12345678",
                            "John Smith",
                            "Individual",
                            "Approved",
                            "90%"});
                table17.AddRow(new string[] {
                            "P87654321",
                            "Jane Smith",
                            "Individual",
                            "Pending Review",
                            "85%"});
                table17.AddRow(new string[] {
                            "P87654329",
                            "Smith Johnson",
                            "Organization",
                            "Escalated",
                            "80%"});
                table17.AddRow(new string[] {
                            "P87654339",
                            "Sarah-Jane Smith",
                            "Individual",
                            "False Positive",
                            "80%"});
#line 109
      await testRunner.GivenAsync("the following parties exist:", ((string)(null)), table17, "Given ");
#line hidden
                global::Reqnroll.Table table18 = new global::Reqnroll.Table(new string[] {
                            "Filter",
                            "Value"});
                table18.AddRow(new string[] {
                            "Type",
                            "Individual"});
#line 115
      await testRunner.WhenAsync("Connie searches for \"Smith\" with the following filters:", ((string)(null)), table18, "When ");
#line hidden
                global::Reqnroll.Table table19 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table19.AddRow(new string[] {
                            "P12345678",
                            "John Smith",
                            "Individual",
                            "Approved",
                            "90%"});
                table19.AddRow(new string[] {
                            "P87654321",
                            "Jane Smith",
                            "Individual",
                            "Pending Review",
                            "85%"});
                table19.AddRow(new string[] {
                            "P87654339",
                            "Sarah-Jane Smith",
                            "Individual",
                            "False Positive",
                            "80%"});
#line 118
      await testRunner.ThenAsync("the search results should contain exactly:", ((string)(null)), table19, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Larry filters his search results to only show parties that are Pending Review")]
        public async System.Threading.Tasks.Task LarryFiltersHisSearchResultsToOnlyShowPartiesThatArePendingReview()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Larry filters his search results to only show parties that are Pending Review", null, tagsOfScenario, argumentsOfScenario, TagHelper.CombineTags(featureTags, new string[] {
                            "allure.label.story:FilterSearchResults"}));
#line 127
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table20 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table20.AddRow(new string[] {
                            "P12345678",
                            "John Smith",
                            "Individual",
                            "Approved",
                            "90%"});
                table20.AddRow(new string[] {
                            "P87654321",
                            "Jane Smith",
                            "Individual",
                            "Pending Review",
                            "85%"});
                table20.AddRow(new string[] {
                            "P87654329",
                            "Smith Johnson",
                            "Organization",
                            "Escalated",
                            "80%"});
                table20.AddRow(new string[] {
                            "P87654339",
                            "Sarah-Jane Smith",
                            "Individual",
                            "Pending Review",
                            "80%"});
#line 128
      await testRunner.GivenAsync("the following parties exist:", ((string)(null)), table20, "Given ");
#line hidden
                global::Reqnroll.Table table21 = new global::Reqnroll.Table(new string[] {
                            "Filter",
                            "Value"});
                table21.AddRow(new string[] {
                            "Status",
                            "Pending Review"});
#line 134
      await testRunner.WhenAsync("Larry searches for \"Smith\" with the following filters:", ((string)(null)), table21, "When ");
#line hidden
                global::Reqnroll.Table table22 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table22.AddRow(new string[] {
                            "P87654321",
                            "Jane Smith",
                            "Individual",
                            "Pending Review",
                            "85%"});
                table22.AddRow(new string[] {
                            "P87654339",
                            "Sarah-Jane Smith",
                            "Individual",
                            "Pending Review",
                            "80%"});
#line 137
      await testRunner.ThenAsync("the search results should contain exactly:", ((string)(null)), table22, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Connie filters her search results to only Individuals that are Confirmed Matches")]
        public async System.Threading.Tasks.Task ConnieFiltersHerSearchResultsToOnlyIndividualsThatAreConfirmedMatches()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Connie filters her search results to only Individuals that are Confirmed Matches", null, tagsOfScenario, argumentsOfScenario, TagHelper.CombineTags(featureTags, new string[] {
                            "allure.label.story:FilterSearchResults"}));
#line 142
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table23 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table23.AddRow(new string[] {
                            "P12345678",
                            "John Smith",
                            "Individual",
                            "Confirmed Match",
                            "90%"});
                table23.AddRow(new string[] {
                            "P87654321",
                            "Jane Smith",
                            "Individual",
                            "Pending Review",
                            "85%"});
                table23.AddRow(new string[] {
                            "P87654329",
                            "Smith Johnson",
                            "Organization",
                            "Confirmed Match",
                            "99%"});
                table23.AddRow(new string[] {
                            "P87654339",
                            "Sarah-Jane Smith",
                            "Individual",
                            "False Positive",
                            "80%"});
#line 143
      await testRunner.GivenAsync("the following parties exist:", ((string)(null)), table23, "Given ");
#line hidden
                global::Reqnroll.Table table24 = new global::Reqnroll.Table(new string[] {
                            "Filter",
                            "Value"});
                table24.AddRow(new string[] {
                            "Type",
                            "Individual"});
                table24.AddRow(new string[] {
                            "Sanction Status",
                            "Confirmed Match"});
#line 149
      await testRunner.WhenAsync("Connie searches for \"Smith\" with the following filters:", ((string)(null)), table24, "When ");
#line hidden
                global::Reqnroll.Table table25 = new global::Reqnroll.Table(new string[] {
                            "Party ID",
                            "Name",
                            "Type",
                            "Sanctions Status",
                            "Match Score"});
                table25.AddRow(new string[] {
                            "P12345678",
                            "John Smith",
                            "Individual",
                            "Confirmed Match",
                            "90%"});
#line 153
      await testRunner.ThenAsync("the search results should contain exactly:", ((string)(null)), table25, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search results are paginated")]
        public async System.Threading.Tasks.Task SearchResultsArePaginated()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Search results are paginated", null, tagsOfScenario, argumentsOfScenario, TagHelper.CombineTags(featureTags, new string[] {
                            "allure.label.story:FilterSearchResults"}));
#line 160
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 161
      await testRunner.GivenAsync("100 parties exist with a name containing \"Smith\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table26 = new global::Reqnroll.Table(new string[] {
                            "Page",
                            "pageSize"});
                table26.AddRow(new string[] {
                            "1",
                            "10"});
#line 162
      await testRunner.WhenAsync("Connie searches for \"Smith\" with the following parameters:", ((string)(null)), table26, "When ");
#line hidden
#line 165
      await testRunner.ThenAsync("the parties returned should be items 1-10 of the complete result set", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table27 = new global::Reqnroll.Table(new string[] {
                            "totalResults",
                            "totalPages",
                            "currentPage",
                            "pageSize"});
                table27.AddRow(new string[] {
                            "100",
                            "10",
                            "1",
                            "10"});
#line 166
      await testRunner.AndAsync("the response should include pagination metadata:", ((string)(null)), table27, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Fetching the results for a different page")]
        public async System.Threading.Tasks.Task FetchingTheResultsForADifferentPage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fetching the results for a different page", null, tagsOfScenario, argumentsOfScenario, TagHelper.CombineTags(featureTags, new string[] {
                            "allure.label.story:FilterSearchResults"}));
#line 170
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 171
      await testRunner.GivenAsync("95 parties exist with a name containing \"Smith\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table28 = new global::Reqnroll.Table(new string[] {
                            "Page",
                            "pageSize"});
                table28.AddRow(new string[] {
                            "2",
                            "10"});
#line 172
      await testRunner.WhenAsync("Connie searches for \"Smith\" with the following parameters:", ((string)(null)), table28, "When ");
#line hidden
#line 175
      await testRunner.ThenAsync("the parties returned should be items 11-20 of the complete result set", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table29 = new global::Reqnroll.Table(new string[] {
                            "totalResults",
                            "totalPages",
                            "currentPage",
                            "pageSize"});
                table29.AddRow(new string[] {
                            "95",
                            "10",
                            "2",
                            "10"});
#line 176
      await testRunner.AndAsync("the response should include pagination metadata:", ((string)(null)), table29, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
